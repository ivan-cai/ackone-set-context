"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const endpoint_util_1 = __importDefault(require("@alicloud/endpoint-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AttachClusterToHubRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            attachToMesh: 'AttachToMesh',
            clusterId: 'ClusterId',
            clusterIds: 'ClusterIds',
        };
    }
    static types() {
        return {
            attachToMesh: 'boolean',
            clusterId: 'string',
            clusterIds: 'string',
        };
    }
}
exports.AttachClusterToHubRequest = AttachClusterToHubRequest;
class AttachClusterToHubResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            managedClusterIds: 'ManagedClusterIds',
            requestId: 'RequestId',
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            managedClusterIds: { 'type': 'array', 'itemType': 'string' },
            requestId: 'string',
            taskId: 'string',
        };
    }
}
exports.AttachClusterToHubResponseBody = AttachClusterToHubResponseBody;
class AttachClusterToHubResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AttachClusterToHubResponseBody,
        };
    }
}
exports.AttachClusterToHubResponse = AttachClusterToHubResponse;
class CreateHubClusterRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiServerPublicEip: 'ApiServerPublicEip',
            argoServerEnabled: 'ArgoServerEnabled',
            auditLogEnabled: 'AuditLogEnabled',
            isEnterpriseSecurityGroup: 'IsEnterpriseSecurityGroup',
            name: 'Name',
            priceLimit: 'PriceLimit',
            profile: 'Profile',
            regionId: 'RegionId',
            vSwitches: 'VSwitches',
            vpcId: 'VpcId',
            workflowScheduleMode: 'WorkflowScheduleMode',
        };
    }
    static types() {
        return {
            apiServerPublicEip: 'boolean',
            argoServerEnabled: 'boolean',
            auditLogEnabled: 'boolean',
            isEnterpriseSecurityGroup: 'boolean',
            name: 'string',
            priceLimit: 'string',
            profile: 'string',
            regionId: 'string',
            vSwitches: 'string',
            vpcId: 'string',
            workflowScheduleMode: 'string',
        };
    }
}
exports.CreateHubClusterRequest = CreateHubClusterRequest;
class CreateHubClusterResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            requestId: 'RequestId',
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            requestId: 'string',
            taskId: 'string',
        };
    }
}
exports.CreateHubClusterResponseBody = CreateHubClusterResponseBody;
class CreateHubClusterResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateHubClusterResponseBody,
        };
    }
}
exports.CreateHubClusterResponse = CreateHubClusterResponse;
class DeleteHubClusterRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            force: 'Force',
            retainResources: 'RetainResources',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            force: 'boolean',
            retainResources: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DeleteHubClusterRequest = DeleteHubClusterRequest;
class DeleteHubClusterShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            force: 'Force',
            retainResourcesShrink: 'RetainResources',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            force: 'boolean',
            retainResourcesShrink: 'string',
        };
    }
}
exports.DeleteHubClusterShrinkRequest = DeleteHubClusterShrinkRequest;
class DeleteHubClusterResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            requestId: 'RequestId',
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            requestId: 'string',
            taskId: 'string',
        };
    }
}
exports.DeleteHubClusterResponseBody = DeleteHubClusterResponseBody;
class DeleteHubClusterResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteHubClusterResponseBody,
        };
    }
}
exports.DeleteHubClusterResponse = DeleteHubClusterResponse;
class DeletePolicyInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            clusterIds: 'ClusterIds',
            policyName: 'PolicyName',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            clusterIds: { 'type': 'array', 'itemType': 'string' },
            policyName: 'string',
        };
    }
}
exports.DeletePolicyInstanceRequest = DeletePolicyInstanceRequest;
class DeletePolicyInstanceShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            clusterIdsShrink: 'ClusterIds',
            policyName: 'PolicyName',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            clusterIdsShrink: 'string',
            policyName: 'string',
        };
    }
}
exports.DeletePolicyInstanceShrinkRequest = DeletePolicyInstanceShrinkRequest;
class DeletePolicyInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.DeletePolicyInstanceResponseBody = DeletePolicyInstanceResponseBody;
class DeletePolicyInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeletePolicyInstanceResponseBody,
        };
    }
}
exports.DeletePolicyInstanceResponse = DeletePolicyInstanceResponse;
class DeleteUserPermissionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            userId: 'string',
        };
    }
}
exports.DeleteUserPermissionRequest = DeleteUserPermissionRequest;
class DeleteUserPermissionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.DeleteUserPermissionResponseBody = DeleteUserPermissionResponseBody;
class DeleteUserPermissionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteUserPermissionResponseBody,
        };
    }
}
exports.DeleteUserPermissionResponse = DeleteUserPermissionResponse;
class DeployPolicyInstanceRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            clusterIds: 'ClusterIds',
            namespaces: 'Namespaces',
            policyAction: 'PolicyAction',
            policyName: 'PolicyName',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            clusterIds: { 'type': 'array', 'itemType': 'string' },
            namespaces: { 'type': 'array', 'itemType': 'string' },
            policyAction: 'string',
            policyName: 'string',
        };
    }
}
exports.DeployPolicyInstanceRequest = DeployPolicyInstanceRequest;
class DeployPolicyInstanceShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            clusterIdsShrink: 'ClusterIds',
            namespacesShrink: 'Namespaces',
            policyAction: 'PolicyAction',
            policyName: 'PolicyName',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            clusterIdsShrink: 'string',
            namespacesShrink: 'string',
            policyAction: 'string',
            policyName: 'string',
        };
    }
}
exports.DeployPolicyInstanceShrinkRequest = DeployPolicyInstanceShrinkRequest;
class DeployPolicyInstanceResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.DeployPolicyInstanceResponseBody = DeployPolicyInstanceResponseBody;
class DeployPolicyInstanceResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeployPolicyInstanceResponseBody,
        };
    }
}
exports.DeployPolicyInstanceResponse = DeployPolicyInstanceResponse;
class DescribeHubClusterDetailsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
        };
    }
}
exports.DescribeHubClusterDetailsRequest = DescribeHubClusterDetailsRequest;
class DescribeHubClusterDetailsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cluster: 'Cluster',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            cluster: DescribeHubClusterDetailsResponseBodyCluster,
            requestId: 'string',
        };
    }
}
exports.DescribeHubClusterDetailsResponseBody = DescribeHubClusterDetailsResponseBody;
class DescribeHubClusterDetailsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribeHubClusterDetailsResponseBody,
        };
    }
}
exports.DescribeHubClusterDetailsResponse = DescribeHubClusterDetailsResponse;
class DescribeHubClusterKubeconfigRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            privateIpAddress: 'PrivateIpAddress',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            privateIpAddress: 'boolean',
        };
    }
}
exports.DescribeHubClusterKubeconfigRequest = DescribeHubClusterKubeconfigRequest;
class DescribeHubClusterKubeconfigResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            kubeconfig: 'Kubeconfig',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            kubeconfig: 'string',
            requestId: 'string',
        };
    }
}
exports.DescribeHubClusterKubeconfigResponseBody = DescribeHubClusterKubeconfigResponseBody;
class DescribeHubClusterKubeconfigResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribeHubClusterKubeconfigResponseBody,
        };
    }
}
exports.DescribeHubClusterKubeconfigResponse = DescribeHubClusterKubeconfigResponse;
class DescribeHubClusterLogsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
        };
    }
}
exports.DescribeHubClusterLogsRequest = DescribeHubClusterLogsRequest;
class DescribeHubClusterLogsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            logs: 'Logs',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            logs: { 'type': 'array', 'itemType': DescribeHubClusterLogsResponseBodyLogs },
            requestId: 'string',
        };
    }
}
exports.DescribeHubClusterLogsResponseBody = DescribeHubClusterLogsResponseBody;
class DescribeHubClusterLogsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribeHubClusterLogsResponseBody,
        };
    }
}
exports.DescribeHubClusterLogsResponse = DescribeHubClusterLogsResponse;
class DescribeHubClustersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            profile: 'Profile',
        };
    }
    static types() {
        return {
            profile: 'string',
        };
    }
}
exports.DescribeHubClustersRequest = DescribeHubClustersRequest;
class DescribeHubClustersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusters: 'Clusters',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            clusters: { 'type': 'array', 'itemType': DescribeHubClustersResponseBodyClusters },
            requestId: 'string',
        };
    }
}
exports.DescribeHubClustersResponseBody = DescribeHubClustersResponseBody;
class DescribeHubClustersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribeHubClustersResponseBody,
        };
    }
}
exports.DescribeHubClustersResponse = DescribeHubClustersResponse;
class DescribeManagedClustersRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
        };
    }
}
exports.DescribeManagedClustersRequest = DescribeManagedClustersRequest;
class DescribeManagedClustersResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusters: 'Clusters',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            clusters: { 'type': 'array', 'itemType': DescribeManagedClustersResponseBodyClusters },
            requestId: 'string',
        };
    }
}
exports.DescribeManagedClustersResponseBody = DescribeManagedClustersResponseBody;
class DescribeManagedClustersResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribeManagedClustersResponseBody,
        };
    }
}
exports.DescribeManagedClustersResponse = DescribeManagedClustersResponse;
class DescribePoliciesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            policies: 'Policies',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            policies: { 'type': 'array', 'itemType': DescribePoliciesResponseBodyPolicies },
            requestId: 'string',
        };
    }
}
exports.DescribePoliciesResponseBody = DescribePoliciesResponseBody;
class DescribePoliciesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribePoliciesResponseBody,
        };
    }
}
exports.DescribePoliciesResponse = DescribePoliciesResponse;
class DescribePolicyDetailsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            policyName: 'PolicyName',
        };
    }
    static types() {
        return {
            policyName: 'string',
        };
    }
}
exports.DescribePolicyDetailsRequest = DescribePolicyDetailsRequest;
class DescribePolicyDetailsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            policy: 'Policy',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            policy: DescribePolicyDetailsResponseBodyPolicy,
            requestId: 'string',
        };
    }
}
exports.DescribePolicyDetailsResponseBody = DescribePolicyDetailsResponseBody;
class DescribePolicyDetailsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribePolicyDetailsResponseBody,
        };
    }
}
exports.DescribePolicyDetailsResponse = DescribePolicyDetailsResponse;
class DescribePolicyGovernanceInClusterRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
        };
    }
}
exports.DescribePolicyGovernanceInClusterRequest = DescribePolicyGovernanceInClusterRequest;
class DescribePolicyGovernanceInClusterResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            policyGovernances: 'PolicyGovernances',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            policyGovernances: { 'type': 'array', 'itemType': DescribePolicyGovernanceInClusterResponseBodyPolicyGovernances },
            requestId: 'string',
        };
    }
}
exports.DescribePolicyGovernanceInClusterResponseBody = DescribePolicyGovernanceInClusterResponseBody;
class DescribePolicyGovernanceInClusterResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribePolicyGovernanceInClusterResponseBody,
        };
    }
}
exports.DescribePolicyGovernanceInClusterResponse = DescribePolicyGovernanceInClusterResponse;
class DescribePolicyInstancesRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            policyName: 'PolicyName',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            policyName: 'string',
        };
    }
}
exports.DescribePolicyInstancesRequest = DescribePolicyInstancesRequest;
class DescribePolicyInstancesResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            policies: 'Policies',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            policies: { 'type': 'array', 'itemType': DescribePolicyInstancesResponseBodyPolicies },
            requestId: 'string',
        };
    }
}
exports.DescribePolicyInstancesResponseBody = DescribePolicyInstancesResponseBody;
class DescribePolicyInstancesResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribePolicyInstancesResponseBody,
        };
    }
}
exports.DescribePolicyInstancesResponse = DescribePolicyInstancesResponse;
class DescribePolicyInstancesStatusRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
        };
    }
}
exports.DescribePolicyInstancesStatusRequest = DescribePolicyInstancesStatusRequest;
class DescribePolicyInstancesStatusResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            policies: 'Policies',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            policies: DescribePolicyInstancesStatusResponseBodyPolicies,
            requestId: 'string',
        };
    }
}
exports.DescribePolicyInstancesStatusResponseBody = DescribePolicyInstancesStatusResponseBody;
class DescribePolicyInstancesStatusResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribePolicyInstancesStatusResponseBody,
        };
    }
}
exports.DescribePolicyInstancesStatusResponse = DescribePolicyInstancesStatusResponse;
class DescribeRegionsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            language: 'Language',
        };
    }
    static types() {
        return {
            language: 'string',
        };
    }
}
exports.DescribeRegionsRequest = DescribeRegionsRequest;
class DescribeRegionsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regions: 'Regions',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            regions: { 'type': 'array', 'itemType': DescribeRegionsResponseBodyRegions },
            requestId: 'string',
        };
    }
}
exports.DescribeRegionsResponseBody = DescribeRegionsResponseBody;
class DescribeRegionsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribeRegionsResponseBody,
        };
    }
}
exports.DescribeRegionsResponse = DescribeRegionsResponse;
class DescribeUserPermissionsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            userId: 'UserId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
}
exports.DescribeUserPermissionsRequest = DescribeUserPermissionsRequest;
class DescribeUserPermissionsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            permissions: 'Permissions',
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            permissions: { 'type': 'array', 'itemType': DescribeUserPermissionsResponseBodyPermissions },
            requestId: 'string',
        };
    }
}
exports.DescribeUserPermissionsResponseBody = DescribeUserPermissionsResponseBody;
class DescribeUserPermissionsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DescribeUserPermissionsResponseBody,
        };
    }
}
exports.DescribeUserPermissionsResponse = DescribeUserPermissionsResponse;
class DetachClusterFromHubRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            clusterIds: 'ClusterIds',
            detachFromMesh: 'DetachFromMesh',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            clusterIds: 'string',
            detachFromMesh: 'boolean',
        };
    }
}
exports.DetachClusterFromHubRequest = DetachClusterFromHubRequest;
class DetachClusterFromHubResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            managedClusterIds: 'ManagedClusterIds',
            requestId: 'RequestId',
            taskId: 'TaskId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            managedClusterIds: { 'type': 'array', 'itemType': 'string' },
            requestId: 'string',
            taskId: 'string',
        };
    }
}
exports.DetachClusterFromHubResponseBody = DetachClusterFromHubResponseBody;
class DetachClusterFromHubResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DetachClusterFromHubResponseBody,
        };
    }
}
exports.DetachClusterFromHubResponse = DetachClusterFromHubResponse;
class GrantUserPermissionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            isRamRole: 'IsRamRole',
            namespace: 'Namespace',
            roleName: 'RoleName',
            roleType: 'RoleType',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            isRamRole: 'boolean',
            namespace: 'string',
            roleName: 'string',
            roleType: 'string',
            userId: 'string',
        };
    }
}
exports.GrantUserPermissionRequest = GrantUserPermissionRequest;
class GrantUserPermissionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.GrantUserPermissionResponseBody = GrantUserPermissionResponseBody;
class GrantUserPermissionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GrantUserPermissionResponseBody,
        };
    }
}
exports.GrantUserPermissionResponse = GrantUserPermissionResponse;
class GrantUserPermissionsRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            permissions: 'Permissions',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            permissions: { 'type': 'array', 'itemType': GrantUserPermissionsRequestPermissions },
            userId: 'string',
        };
    }
}
exports.GrantUserPermissionsRequest = GrantUserPermissionsRequest;
class GrantUserPermissionsShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            permissionsShrink: 'Permissions',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            permissionsShrink: 'string',
            userId: 'string',
        };
    }
}
exports.GrantUserPermissionsShrinkRequest = GrantUserPermissionsShrinkRequest;
class GrantUserPermissionsResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.GrantUserPermissionsResponseBody = GrantUserPermissionsResponseBody;
class GrantUserPermissionsResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GrantUserPermissionsResponseBody,
        };
    }
}
exports.GrantUserPermissionsResponse = GrantUserPermissionsResponse;
class UpdateHubClusterFeatureRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessControlList: 'AccessControlList',
            apiServerEipId: 'ApiServerEipId',
            argoCDEnabled: 'ArgoCDEnabled',
            argoCDHAEnabled: 'ArgoCDHAEnabled',
            argoServerEnabled: 'ArgoServerEnabled',
            auditLogEnabled: 'AuditLogEnabled',
            clusterId: 'ClusterId',
            deletionProtection: 'DeletionProtection',
            enableMesh: 'EnableMesh',
            monitorEnabled: 'MonitorEnabled',
            name: 'Name',
            priceLimit: 'PriceLimit',
            publicAccessEnabled: 'PublicAccessEnabled',
            publicApiServerEnabled: 'PublicApiServerEnabled',
            vSwitches: 'VSwitches',
            workflowScheduleMode: 'WorkflowScheduleMode',
        };
    }
    static types() {
        return {
            accessControlList: { 'type': 'array', 'itemType': 'string' },
            apiServerEipId: 'string',
            argoCDEnabled: 'boolean',
            argoCDHAEnabled: 'boolean',
            argoServerEnabled: 'boolean',
            auditLogEnabled: 'boolean',
            clusterId: 'string',
            deletionProtection: 'boolean',
            enableMesh: 'boolean',
            monitorEnabled: 'boolean',
            name: 'string',
            priceLimit: 'string',
            publicAccessEnabled: 'boolean',
            publicApiServerEnabled: 'boolean',
            vSwitches: { 'type': 'array', 'itemType': 'string' },
            workflowScheduleMode: 'string',
        };
    }
}
exports.UpdateHubClusterFeatureRequest = UpdateHubClusterFeatureRequest;
class UpdateHubClusterFeatureShrinkRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            accessControlListShrink: 'AccessControlList',
            apiServerEipId: 'ApiServerEipId',
            argoCDEnabled: 'ArgoCDEnabled',
            argoCDHAEnabled: 'ArgoCDHAEnabled',
            argoServerEnabled: 'ArgoServerEnabled',
            auditLogEnabled: 'AuditLogEnabled',
            clusterId: 'ClusterId',
            deletionProtection: 'DeletionProtection',
            enableMesh: 'EnableMesh',
            monitorEnabled: 'MonitorEnabled',
            name: 'Name',
            priceLimit: 'PriceLimit',
            publicAccessEnabled: 'PublicAccessEnabled',
            publicApiServerEnabled: 'PublicApiServerEnabled',
            vSwitchesShrink: 'VSwitches',
            workflowScheduleMode: 'WorkflowScheduleMode',
        };
    }
    static types() {
        return {
            accessControlListShrink: 'string',
            apiServerEipId: 'string',
            argoCDEnabled: 'boolean',
            argoCDHAEnabled: 'boolean',
            argoServerEnabled: 'boolean',
            auditLogEnabled: 'boolean',
            clusterId: 'string',
            deletionProtection: 'boolean',
            enableMesh: 'boolean',
            monitorEnabled: 'boolean',
            name: 'string',
            priceLimit: 'string',
            publicAccessEnabled: 'boolean',
            publicApiServerEnabled: 'boolean',
            vSwitchesShrink: 'string',
            workflowScheduleMode: 'string',
        };
    }
}
exports.UpdateHubClusterFeatureShrinkRequest = UpdateHubClusterFeatureShrinkRequest;
class UpdateHubClusterFeatureResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UpdateHubClusterFeatureResponseBody = UpdateHubClusterFeatureResponseBody;
class UpdateHubClusterFeatureResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateHubClusterFeatureResponseBody,
        };
    }
}
exports.UpdateHubClusterFeatureResponse = UpdateHubClusterFeatureResponse;
class UpdateUserPermissionRequest extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            namespace: 'Namespace',
            roleName: 'RoleName',
            roleType: 'RoleType',
            userId: 'UserId',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            namespace: 'string',
            roleName: 'string',
            roleType: 'string',
            userId: 'string',
        };
    }
}
exports.UpdateUserPermissionRequest = UpdateUserPermissionRequest;
class UpdateUserPermissionResponseBody extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            requestId: 'RequestId',
        };
    }
    static types() {
        return {
            requestId: 'string',
        };
    }
}
exports.UpdateUserPermissionResponseBody = UpdateUserPermissionResponseBody;
class UpdateUserPermissionResponse extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateUserPermissionResponseBody,
        };
    }
}
exports.UpdateUserPermissionResponse = UpdateUserPermissionResponse;
class DescribeHubClusterDetailsResponseBodyClusterApiServer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiServerEipId: 'ApiServerEipId',
            enabledPublic: 'EnabledPublic',
            loadBalancerId: 'LoadBalancerId',
        };
    }
    static types() {
        return {
            apiServerEipId: 'string',
            enabledPublic: 'boolean',
            loadBalancerId: 'string',
        };
    }
}
exports.DescribeHubClusterDetailsResponseBodyClusterApiServer = DescribeHubClusterDetailsResponseBodyClusterApiServer;
class DescribeHubClusterDetailsResponseBodyClusterClusterInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            clusterSpec: 'ClusterSpec',
            creationTime: 'CreationTime',
            errorMessage: 'ErrorMessage',
            name: 'Name',
            profile: 'Profile',
            regionId: 'RegionId',
            state: 'State',
            updateTime: 'UpdateTime',
            version: 'Version',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            clusterSpec: 'string',
            creationTime: 'string',
            errorMessage: 'string',
            name: 'string',
            profile: 'string',
            regionId: 'string',
            state: 'string',
            updateTime: 'string',
            version: 'string',
        };
    }
}
exports.DescribeHubClusterDetailsResponseBodyClusterClusterInfo = DescribeHubClusterDetailsResponseBodyClusterClusterInfo;
class DescribeHubClusterDetailsResponseBodyClusterConditions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'Message',
            reason: 'Reason',
            status: 'Status',
            type: 'Type',
        };
    }
    static types() {
        return {
            message: 'string',
            reason: 'string',
            status: 'string',
            type: 'string',
        };
    }
}
exports.DescribeHubClusterDetailsResponseBodyClusterConditions = DescribeHubClusterDetailsResponseBodyClusterConditions;
class DescribeHubClusterDetailsResponseBodyClusterEndpoints extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            intranetApiServerEndpoint: 'IntranetApiServerEndpoint',
            publicApiServerEndpoint: 'PublicApiServerEndpoint',
        };
    }
    static types() {
        return {
            intranetApiServerEndpoint: 'string',
            publicApiServerEndpoint: 'string',
        };
    }
}
exports.DescribeHubClusterDetailsResponseBodyClusterEndpoints = DescribeHubClusterDetailsResponseBodyClusterEndpoints;
class DescribeHubClusterDetailsResponseBodyClusterLogConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            enableLog: 'EnableLog',
            logProject: 'LogProject',
            logStoreTTL: 'LogStoreTTL',
        };
    }
    static types() {
        return {
            enableLog: 'boolean',
            logProject: 'string',
            logStoreTTL: 'string',
        };
    }
}
exports.DescribeHubClusterDetailsResponseBodyClusterLogConfig = DescribeHubClusterDetailsResponseBodyClusterLogConfig;
class DescribeHubClusterDetailsResponseBodyClusterMeshConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            enableMesh: 'EnableMesh',
            meshId: 'MeshId',
        };
    }
    static types() {
        return {
            enableMesh: 'boolean',
            meshId: 'string',
        };
    }
}
exports.DescribeHubClusterDetailsResponseBodyClusterMeshConfig = DescribeHubClusterDetailsResponseBodyClusterMeshConfig;
class DescribeHubClusterDetailsResponseBodyClusterNetwork extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterDomain: 'ClusterDomain',
            IPStack: 'IPStack',
            securityGroupIDs: 'SecurityGroupIDs',
            vSwitches: 'VSwitches',
            vpcId: 'VpcId',
        };
    }
    static types() {
        return {
            clusterDomain: 'string',
            IPStack: 'string',
            securityGroupIDs: { 'type': 'array', 'itemType': 'string' },
            vSwitches: { 'type': 'array', 'itemType': 'string' },
            vpcId: 'string',
        };
    }
}
exports.DescribeHubClusterDetailsResponseBodyClusterNetwork = DescribeHubClusterDetailsResponseBodyClusterNetwork;
class DescribeHubClusterDetailsResponseBodyClusterWorkflowConfigWorkflowUnitsVSwitches extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            vswitchId: 'VswitchId',
            zoneId: 'ZoneId',
        };
    }
    static types() {
        return {
            vswitchId: 'string',
            zoneId: 'string',
        };
    }
}
exports.DescribeHubClusterDetailsResponseBodyClusterWorkflowConfigWorkflowUnitsVSwitches = DescribeHubClusterDetailsResponseBodyClusterWorkflowConfigWorkflowUnitsVSwitches;
class DescribeHubClusterDetailsResponseBodyClusterWorkflowConfigWorkflowUnits extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            regionId: 'RegionId',
            vSwitches: 'VSwitches',
            vpcId: 'VpcId',
        };
    }
    static types() {
        return {
            regionId: 'string',
            vSwitches: { 'type': 'array', 'itemType': DescribeHubClusterDetailsResponseBodyClusterWorkflowConfigWorkflowUnitsVSwitches },
            vpcId: 'string',
        };
    }
}
exports.DescribeHubClusterDetailsResponseBodyClusterWorkflowConfigWorkflowUnits = DescribeHubClusterDetailsResponseBodyClusterWorkflowConfigWorkflowUnits;
class DescribeHubClusterDetailsResponseBodyClusterWorkflowConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            argoServerEnabled: 'ArgoServerEnabled',
            priceLimit: 'PriceLimit',
            workflowScheduleMode: 'WorkflowScheduleMode',
            workflowUnits: 'WorkflowUnits',
        };
    }
    static types() {
        return {
            argoServerEnabled: 'boolean',
            priceLimit: 'string',
            workflowScheduleMode: 'string',
            workflowUnits: { 'type': 'array', 'itemType': DescribeHubClusterDetailsResponseBodyClusterWorkflowConfigWorkflowUnits },
        };
    }
}
exports.DescribeHubClusterDetailsResponseBodyClusterWorkflowConfig = DescribeHubClusterDetailsResponseBodyClusterWorkflowConfig;
class DescribeHubClusterDetailsResponseBodyCluster extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiServer: 'ApiServer',
            clusterInfo: 'ClusterInfo',
            conditions: 'Conditions',
            endpoints: 'Endpoints',
            logConfig: 'LogConfig',
            meshConfig: 'MeshConfig',
            network: 'Network',
            workflowConfig: 'WorkflowConfig',
        };
    }
    static types() {
        return {
            apiServer: DescribeHubClusterDetailsResponseBodyClusterApiServer,
            clusterInfo: DescribeHubClusterDetailsResponseBodyClusterClusterInfo,
            conditions: { 'type': 'array', 'itemType': DescribeHubClusterDetailsResponseBodyClusterConditions },
            endpoints: DescribeHubClusterDetailsResponseBodyClusterEndpoints,
            logConfig: DescribeHubClusterDetailsResponseBodyClusterLogConfig,
            meshConfig: DescribeHubClusterDetailsResponseBodyClusterMeshConfig,
            network: DescribeHubClusterDetailsResponseBodyClusterNetwork,
            workflowConfig: DescribeHubClusterDetailsResponseBodyClusterWorkflowConfig,
        };
    }
}
exports.DescribeHubClusterDetailsResponseBodyCluster = DescribeHubClusterDetailsResponseBodyCluster;
class DescribeHubClusterLogsResponseBodyLogs extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            clusterLog: 'ClusterLog',
            creationTime: 'CreationTime',
            logLevel: 'LogLevel',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            clusterLog: 'string',
            creationTime: 'string',
            logLevel: 'string',
        };
    }
}
exports.DescribeHubClusterLogsResponseBodyLogs = DescribeHubClusterLogsResponseBodyLogs;
class DescribeHubClustersResponseBodyClustersApiServer extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiServerEipId: 'ApiServerEipId',
            enabledPublic: 'EnabledPublic',
            loadBalancerId: 'LoadBalancerId',
        };
    }
    static types() {
        return {
            apiServerEipId: 'string',
            enabledPublic: 'boolean',
            loadBalancerId: 'string',
        };
    }
}
exports.DescribeHubClustersResponseBodyClustersApiServer = DescribeHubClustersResponseBodyClustersApiServer;
class DescribeHubClustersResponseBodyClustersClusterInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            clusterSpec: 'ClusterSpec',
            creationTime: 'CreationTime',
            errorMessage: 'ErrorMessage',
            name: 'Name',
            profile: 'Profile',
            regionId: 'RegionId',
            state: 'State',
            updateTime: 'UpdateTime',
            version: 'Version',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            clusterSpec: 'string',
            creationTime: 'string',
            errorMessage: 'string',
            name: 'string',
            profile: 'string',
            regionId: 'string',
            state: 'string',
            updateTime: 'string',
            version: 'string',
        };
    }
}
exports.DescribeHubClustersResponseBodyClustersClusterInfo = DescribeHubClustersResponseBodyClustersClusterInfo;
class DescribeHubClustersResponseBodyClustersConditions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'Message',
            reason: 'Reason',
            status: 'Status',
            type: 'Type',
        };
    }
    static types() {
        return {
            message: 'string',
            reason: 'string',
            status: 'string',
            type: 'string',
        };
    }
}
exports.DescribeHubClustersResponseBodyClustersConditions = DescribeHubClustersResponseBodyClustersConditions;
class DescribeHubClustersResponseBodyClustersEndpoints extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            intranetApiServerEndpoint: 'IntranetApiServerEndpoint',
            publicApiServerEndpoint: 'PublicApiServerEndpoint',
        };
    }
    static types() {
        return {
            intranetApiServerEndpoint: 'string',
            publicApiServerEndpoint: 'string',
        };
    }
}
exports.DescribeHubClustersResponseBodyClustersEndpoints = DescribeHubClustersResponseBodyClustersEndpoints;
class DescribeHubClustersResponseBodyClustersLogConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            enableLog: 'EnableLog',
            logProject: 'LogProject',
            logStoreTTL: 'LogStoreTTL',
        };
    }
    static types() {
        return {
            enableLog: 'boolean',
            logProject: 'string',
            logStoreTTL: 'string',
        };
    }
}
exports.DescribeHubClustersResponseBodyClustersLogConfig = DescribeHubClustersResponseBodyClustersLogConfig;
class DescribeHubClustersResponseBodyClustersMeshConfig extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            enableMesh: 'EnableMesh',
            meshId: 'MeshId',
        };
    }
    static types() {
        return {
            enableMesh: 'boolean',
            meshId: 'string',
        };
    }
}
exports.DescribeHubClustersResponseBodyClustersMeshConfig = DescribeHubClustersResponseBodyClustersMeshConfig;
class DescribeHubClustersResponseBodyClustersNetwork extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterDomain: 'ClusterDomain',
            securityGroupIDs: 'SecurityGroupIDs',
            vSwitches: 'VSwitches',
            vpcId: 'VpcId',
        };
    }
    static types() {
        return {
            clusterDomain: 'string',
            securityGroupIDs: { 'type': 'array', 'itemType': 'string' },
            vSwitches: { 'type': 'array', 'itemType': 'string' },
            vpcId: 'string',
        };
    }
}
exports.DescribeHubClustersResponseBodyClustersNetwork = DescribeHubClustersResponseBodyClustersNetwork;
class DescribeHubClustersResponseBodyClusters extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            apiServer: 'ApiServer',
            clusterInfo: 'ClusterInfo',
            conditions: 'Conditions',
            endpoints: 'Endpoints',
            logConfig: 'LogConfig',
            meshConfig: 'MeshConfig',
            network: 'Network',
        };
    }
    static types() {
        return {
            apiServer: DescribeHubClustersResponseBodyClustersApiServer,
            clusterInfo: DescribeHubClustersResponseBodyClustersClusterInfo,
            conditions: { 'type': 'array', 'itemType': DescribeHubClustersResponseBodyClustersConditions },
            endpoints: DescribeHubClustersResponseBodyClustersEndpoints,
            logConfig: DescribeHubClustersResponseBodyClustersLogConfig,
            meshConfig: DescribeHubClustersResponseBodyClustersMeshConfig,
            network: DescribeHubClustersResponseBodyClustersNetwork,
        };
    }
}
exports.DescribeHubClustersResponseBodyClusters = DescribeHubClustersResponseBodyClusters;
class DescribeManagedClustersResponseBodyClustersCluster extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterID: 'ClusterID',
            clusterSpec: 'ClusterSpec',
            clusterType: 'ClusterType',
            created: 'Created',
            currentVersion: 'CurrentVersion',
            initVersion: 'InitVersion',
            name: 'Name',
            profile: 'Profile',
            region: 'Region',
            resourceGroupId: 'ResourceGroupId',
            state: 'State',
            updated: 'Updated',
            vSwitchID: 'VSwitchID',
            vpcID: 'VpcID',
        };
    }
    static types() {
        return {
            clusterID: 'string',
            clusterSpec: 'string',
            clusterType: 'string',
            created: 'string',
            currentVersion: 'string',
            initVersion: 'string',
            name: 'string',
            profile: 'string',
            region: 'string',
            resourceGroupId: 'string',
            state: 'string',
            updated: 'string',
            vSwitchID: 'string',
            vpcID: 'string',
        };
    }
}
exports.DescribeManagedClustersResponseBodyClustersCluster = DescribeManagedClustersResponseBodyClustersCluster;
class DescribeManagedClustersResponseBodyClustersMeshStatus extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            inMesh: 'InMesh',
        };
    }
    static types() {
        return {
            inMesh: 'boolean',
        };
    }
}
exports.DescribeManagedClustersResponseBodyClustersMeshStatus = DescribeManagedClustersResponseBodyClustersMeshStatus;
class DescribeManagedClustersResponseBodyClustersStatus extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            message: 'Message',
            state: 'State',
        };
    }
    static types() {
        return {
            message: 'string',
            state: 'string',
        };
    }
}
exports.DescribeManagedClustersResponseBodyClustersStatus = DescribeManagedClustersResponseBodyClustersStatus;
class DescribeManagedClustersResponseBodyClusters extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cluster: 'Cluster',
            meshStatus: 'MeshStatus',
            status: 'Status',
        };
    }
    static types() {
        return {
            cluster: DescribeManagedClustersResponseBodyClustersCluster,
            meshStatus: DescribeManagedClustersResponseBodyClustersMeshStatus,
            status: DescribeManagedClustersResponseBodyClustersStatus,
        };
    }
}
exports.DescribeManagedClustersResponseBodyClusters = DescribeManagedClustersResponseBodyClusters;
class DescribePoliciesResponseBodyPolicies extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            category: 'Category',
            names: 'Names',
        };
    }
    static types() {
        return {
            category: 'string',
            names: { 'type': 'array', 'itemType': 'string' },
        };
    }
}
exports.DescribePoliciesResponseBodyPolicies = DescribePoliciesResponseBodyPolicies;
class DescribePolicyDetailsResponseBodyPolicy extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            action: 'Action',
            category: 'Category',
            created: 'Created',
            description: 'Description',
            name: 'Name',
            noConfig: 'NoConfig',
            severity: 'Severity',
            template: 'Template',
            updated: 'Updated',
        };
    }
    static types() {
        return {
            action: 'string',
            category: 'string',
            created: 'string',
            description: 'string',
            name: 'string',
            noConfig: 'number',
            severity: 'string',
            template: 'string',
            updated: 'string',
        };
    }
}
exports.DescribePolicyDetailsResponseBodyPolicy = DescribePolicyDetailsResponseBodyPolicy;
class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesCluster extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            clusterSpec: 'ClusterSpec',
            clusterType: 'ClusterType',
            name: 'Name',
            profile: 'Profile',
            regionId: 'RegionId',
            state: 'State',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            clusterSpec: 'string',
            clusterType: 'string',
            name: 'string',
            profile: 'string',
            regionId: 'string',
            state: 'string',
        };
    }
}
exports.DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesCluster = DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesCluster;
class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceAdmitLog extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            count: 'Count',
            logProject: 'LogProject',
            logStore: 'LogStore',
            logs: 'Logs',
            progress: 'Progress',
        };
    }
    static types() {
        return {
            count: 'string',
            logProject: 'string',
            logStore: 'string',
            logs: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'string' } },
            progress: 'string',
        };
    }
}
exports.DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceAdmitLog = DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceAdmitLog;
class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceOnState extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            enabledCount: 'EnabledCount',
            severity: 'Severity',
            totalCount: 'TotalCount',
        };
    }
    static types() {
        return {
            enabledCount: 'number',
            severity: 'string',
            totalCount: 'number',
        };
    }
}
exports.DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceOnState = DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceOnState;
class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolationsDeny extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            severity: 'Severity',
            violations: 'Violations',
        };
    }
    static types() {
        return {
            severity: 'string',
            violations: 'number',
        };
    }
}
exports.DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolationsDeny = DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolationsDeny;
class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolationsWarn extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            severity: 'Severity',
            violations: 'Violations',
        };
    }
    static types() {
        return {
            severity: 'string',
            violations: 'string',
        };
    }
}
exports.DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolationsWarn = DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolationsWarn;
class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolations extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deny: 'Deny',
            warn: 'Warn',
        };
    }
    static types() {
        return {
            deny: { 'type': 'array', 'itemType': DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolationsDeny },
            warn: { 'type': 'array', 'itemType': DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolationsWarn },
        };
    }
}
exports.DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolations = DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolations;
class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolationsDeny extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            policyDescription: 'PolicyDescription',
            policyName: 'PolicyName',
            severity: 'Severity',
            violations: 'Violations',
        };
    }
    static types() {
        return {
            policyDescription: 'string',
            policyName: 'string',
            severity: 'string',
            violations: 'number',
        };
    }
}
exports.DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolationsDeny = DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolationsDeny;
class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolationsWarn extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            policyDescription: 'PolicyDescription',
            policyName: 'PolicyName',
            severity: 'Severity',
            violations: 'Violations',
        };
    }
    static types() {
        return {
            policyDescription: 'string',
            policyName: 'string',
            severity: 'string',
            violations: 'number',
        };
    }
}
exports.DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolationsWarn = DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolationsWarn;
class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolations extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            deny: 'Deny',
            warn: 'Warn',
        };
    }
    static types() {
        return {
            deny: { 'type': 'array', 'itemType': DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolationsDeny },
            warn: { 'type': 'array', 'itemType': DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolationsWarn },
        };
    }
}
exports.DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolations = DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolations;
class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolation extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            totalViolations: 'TotalViolations',
            violations: 'Violations',
        };
    }
    static types() {
        return {
            totalViolations: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolations,
            violations: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolations,
        };
    }
}
exports.DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolation = DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolation;
class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernance extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            admitLog: 'AdmitLog',
            onState: 'OnState',
            violation: 'Violation',
        };
    }
    static types() {
        return {
            admitLog: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceAdmitLog,
            onState: { 'type': 'array', 'itemType': DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceOnState },
            violation: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolation,
        };
    }
}
exports.DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernance = DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernance;
class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernances extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            cluster: 'Cluster',
            policyGovernance: 'PolicyGovernance',
        };
    }
    static types() {
        return {
            cluster: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesCluster,
            policyGovernance: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernance,
        };
    }
}
exports.DescribePolicyGovernanceInClusterResponseBodyPolicyGovernances = DescribePolicyGovernanceInClusterResponseBodyPolicyGovernances;
class DescribePolicyInstancesResponseBodyPolicies extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            instanceName: 'InstanceName',
            policyAction: 'PolicyAction',
            policyCategory: 'PolicyCategory',
            policyDescription: 'PolicyDescription',
            policyName: 'PolicyName',
            policyParameters: 'PolicyParameters',
            policyScope: 'PolicyScope',
            policySeverity: 'PolicySeverity',
            totalViolations: 'TotalViolations',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            instanceName: 'string',
            policyAction: 'string',
            policyCategory: 'string',
            policyDescription: 'string',
            policyName: 'string',
            policyParameters: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            policyScope: 'string',
            policySeverity: 'string',
            totalViolations: 'number',
        };
    }
}
exports.DescribePolicyInstancesResponseBodyPolicies = DescribePolicyInstancesResponseBodyPolicies;
class DescribePolicyInstancesStatusResponseBodyPoliciesPolicyInstancesPolicyClusters extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            status: 'Status',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            status: 'string',
        };
    }
}
exports.DescribePolicyInstancesStatusResponseBodyPoliciesPolicyInstancesPolicyClusters = DescribePolicyInstancesStatusResponseBodyPoliciesPolicyInstancesPolicyClusters;
class DescribePolicyInstancesStatusResponseBodyPoliciesPolicyInstances extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            policyCategory: 'PolicyCategory',
            policyClusters: 'PolicyClusters',
            policyDescription: 'PolicyDescription',
            policyInstancesCount: 'PolicyInstancesCount',
            policyName: 'PolicyName',
            policySeverity: 'PolicySeverity',
        };
    }
    static types() {
        return {
            policyCategory: 'string',
            policyClusters: { 'type': 'array', 'itemType': DescribePolicyInstancesStatusResponseBodyPoliciesPolicyInstancesPolicyClusters },
            policyDescription: 'string',
            policyInstancesCount: 'number',
            policyName: 'string',
            policySeverity: 'string',
        };
    }
}
exports.DescribePolicyInstancesStatusResponseBodyPoliciesPolicyInstances = DescribePolicyInstancesStatusResponseBodyPoliciesPolicyInstances;
class DescribePolicyInstancesStatusResponseBodyPoliciesSeverityInfo extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            severityCount: 'SeverityCount',
            severityType: 'SeverityType',
        };
    }
    static types() {
        return {
            severityCount: 'string',
            severityType: 'string',
        };
    }
}
exports.DescribePolicyInstancesStatusResponseBodyPoliciesSeverityInfo = DescribePolicyInstancesStatusResponseBodyPoliciesSeverityInfo;
class DescribePolicyInstancesStatusResponseBodyPolicies extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            policyInstances: 'PolicyInstances',
            severityInfo: 'SeverityInfo',
        };
    }
    static types() {
        return {
            policyInstances: { 'type': 'array', 'itemType': DescribePolicyInstancesStatusResponseBodyPoliciesPolicyInstances },
            severityInfo: { 'type': 'array', 'itemType': DescribePolicyInstancesStatusResponseBodyPoliciesSeverityInfo },
        };
    }
}
exports.DescribePolicyInstancesStatusResponseBodyPolicies = DescribePolicyInstancesStatusResponseBodyPolicies;
class DescribeRegionsResponseBodyRegions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            localName: 'LocalName',
            regionId: 'RegionId',
        };
    }
    static types() {
        return {
            localName: 'string',
            regionId: 'string',
        };
    }
}
exports.DescribeRegionsResponseBodyRegions = DescribeRegionsResponseBodyRegions;
class DescribeUserPermissionsResponseBodyPermissions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            resourceId: 'ResourceId',
            resourceType: 'ResourceType',
            roleName: 'RoleName',
            roleType: 'RoleType',
        };
    }
    static types() {
        return {
            resourceId: 'string',
            resourceType: 'string',
            roleName: 'string',
            roleType: 'string',
        };
    }
}
exports.DescribeUserPermissionsResponseBodyPermissions = DescribeUserPermissionsResponseBodyPermissions;
class GrantUserPermissionsRequestPermissions extends $tea.Model {
    constructor(map) {
        super(map);
    }
    static names() {
        return {
            clusterId: 'ClusterId',
            isRamRole: 'IsRamRole',
            namespace: 'Namespace',
            roleName: 'RoleName',
            roleType: 'RoleType',
        };
    }
    static types() {
        return {
            clusterId: 'string',
            isRamRole: 'boolean',
            namespace: 'string',
            roleName: 'string',
            roleType: 'string',
        };
    }
}
exports.GrantUserPermissionsRequestPermissions = GrantUserPermissionsRequestPermissions;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._signatureAlgorithm = "v2";
        this._endpointRule = "central";
        this._endpointMap = {
            'cn-beijing': "adcp.cn-beijing.aliyuncs.com",
            'cn-zhangjiakou': "adcp.cn-zhangjiakou.aliyuncs.com",
            'cn-hangzhou': "adcp.cn-hangzhou.aliyuncs.com",
            'cn-shanghai': "adcp.cn-shanghai.aliyuncs.com",
            'cn-shenzhen': "adcp.cn-shenzhen.aliyuncs.com",
            'cn-heyuan': "adcp.cn-heyuan.aliyuncs.com",
            'cn-hongkong': "adcp.cn-hongkong.aliyuncs.com",
            'ap-northeast-1': "adcp.ap-northeast-1.aliyuncs.com",
            'ap-southeast-1': "adcp.ap-southeast-1.aliyuncs.com",
            'ap-southeast-5': "adcp.ap-southeast-5.aliyuncs.com",
            'ap-south-1': "adcp.ap-south-1.aliyuncs.com",
            'ap-southeast-2': "adcp.ap-southeast-2.aliyuncs.com",
            'ap-southeast-3': "adcp.ap-southeast-3.aliyuncs.com",
            'cn-chengdu': "adcp-vpc.cn-chengdu.aliyuncs.com",
            'cn-huhehaote': "adcp.cn-huhehaote.aliyuncs.com",
            'cn-qingdao': "adcp.cn-qingdao.aliyuncs.com",
            'cn-shanghai-finance-1': "adcp-vpc.cn-shanghai-finance-1.aliyuncs.com",
            'cn-wulanchabu': "adcp.cn-wulanchabu.aliyuncs.com",
            'eu-central-1': "adcp.eu-central-1.aliyuncs.com",
            'eu-west-1': "adcp-vpc.eu-west-1.aliyuncs.com",
            'me-east-1': "adcp.me-east-1.aliyuncs.com",
            'us-east-1': "adcp.us-east-1.aliyuncs.com",
            'us-west-1': "adcp.us-west-1.aliyuncs.com",
        };
        this.checkConfig(config);
        this._endpoint = this.getEndpoint("adcp", this._regionId, this._endpointRule, this._network, this._suffix, this._endpointMap, this._endpoint);
    }
    getEndpoint(productId, regionId, endpointRule, network, suffix, endpointMap, endpoint) {
        if (!tea_util_1.default.empty(endpoint)) {
            return endpoint;
        }
        if (!tea_util_1.default.isUnset(endpointMap) && !tea_util_1.default.empty(endpointMap[regionId])) {
            return endpointMap[regionId];
        }
        return endpoint_util_1.default.getEndpointRules(productId, regionId, endpointRule, network, suffix);
    }
    async attachClusterToHubWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.attachToMesh)) {
            query["AttachToMesh"] = request.attachToMesh;
        }
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.clusterIds)) {
            body["ClusterIds"] = request.clusterIds;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AttachClusterToHub",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new AttachClusterToHubResponse({}));
    }
    async attachClusterToHub(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.attachClusterToHubWithOptions(request, runtime);
    }
    async createHubClusterWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.apiServerPublicEip)) {
            body["ApiServerPublicEip"] = request.apiServerPublicEip;
        }
        if (!tea_util_1.default.isUnset(request.argoServerEnabled)) {
            body["ArgoServerEnabled"] = request.argoServerEnabled;
        }
        if (!tea_util_1.default.isUnset(request.auditLogEnabled)) {
            body["AuditLogEnabled"] = request.auditLogEnabled;
        }
        if (!tea_util_1.default.isUnset(request.isEnterpriseSecurityGroup)) {
            body["IsEnterpriseSecurityGroup"] = request.isEnterpriseSecurityGroup;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.priceLimit)) {
            body["PriceLimit"] = request.priceLimit;
        }
        if (!tea_util_1.default.isUnset(request.profile)) {
            body["Profile"] = request.profile;
        }
        if (!tea_util_1.default.isUnset(request.regionId)) {
            body["RegionId"] = request.regionId;
        }
        if (!tea_util_1.default.isUnset(request.vSwitches)) {
            body["VSwitches"] = request.vSwitches;
        }
        if (!tea_util_1.default.isUnset(request.vpcId)) {
            body["VpcId"] = request.vpcId;
        }
        if (!tea_util_1.default.isUnset(request.workflowScheduleMode)) {
            body["WorkflowScheduleMode"] = request.workflowScheduleMode;
        }
        let req = new $OpenApi.OpenApiRequest({
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateHubCluster",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new CreateHubClusterResponse({}));
    }
    async createHubCluster(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.createHubClusterWithOptions(request, runtime);
    }
    async deleteHubClusterWithOptions(tmpReq, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new DeleteHubClusterShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.retainResources)) {
            request.retainResourcesShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.retainResources, "RetainResources", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.force)) {
            query["Force"] = request.force;
        }
        if (!tea_util_1.default.isUnset(request.retainResourcesShrink)) {
            query["RetainResources"] = request.retainResourcesShrink;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteHubCluster",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteHubClusterResponse({}));
    }
    async deleteHubCluster(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteHubClusterWithOptions(request, runtime);
    }
    async deletePolicyInstanceWithOptions(tmpReq, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new DeletePolicyInstanceShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.clusterIds)) {
            request.clusterIdsShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.clusterIds, "ClusterIds", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.clusterIdsShrink)) {
            query["ClusterIds"] = request.clusterIdsShrink;
        }
        if (!tea_util_1.default.isUnset(request.policyName)) {
            query["PolicyName"] = request.policyName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeletePolicyInstance",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeletePolicyInstanceResponse({}));
    }
    async deletePolicyInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deletePolicyInstanceWithOptions(request, runtime);
    }
    async deleteUserPermissionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["UserId"] = request.userId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteUserPermission",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeleteUserPermissionResponse({}));
    }
    async deleteUserPermission(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deleteUserPermissionWithOptions(request, runtime);
    }
    async deployPolicyInstanceWithOptions(tmpReq, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new DeployPolicyInstanceShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.clusterIds)) {
            request.clusterIdsShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.clusterIds, "ClusterIds", "json");
        }
        if (!tea_util_1.default.isUnset(tmpReq.namespaces)) {
            request.namespacesShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.namespaces, "Namespaces", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.clusterIdsShrink)) {
            query["ClusterIds"] = request.clusterIdsShrink;
        }
        if (!tea_util_1.default.isUnset(request.namespacesShrink)) {
            query["Namespaces"] = request.namespacesShrink;
        }
        if (!tea_util_1.default.isUnset(request.policyAction)) {
            query["PolicyAction"] = request.policyAction;
        }
        if (!tea_util_1.default.isUnset(request.policyName)) {
            query["PolicyName"] = request.policyName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeployPolicyInstance",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DeployPolicyInstanceResponse({}));
    }
    async deployPolicyInstance(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.deployPolicyInstanceWithOptions(request, runtime);
    }
    async describeHubClusterDetailsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribeHubClusterDetails",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribeHubClusterDetailsResponse({}));
    }
    async describeHubClusterDetails(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeHubClusterDetailsWithOptions(request, runtime);
    }
    async describeHubClusterKubeconfigWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.privateIpAddress)) {
            query["PrivateIpAddress"] = request.privateIpAddress;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribeHubClusterKubeconfig",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribeHubClusterKubeconfigResponse({}));
    }
    async describeHubClusterKubeconfig(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeHubClusterKubeconfigWithOptions(request, runtime);
    }
    async describeHubClusterLogsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribeHubClusterLogs",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribeHubClusterLogsResponse({}));
    }
    async describeHubClusterLogs(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeHubClusterLogsWithOptions(request, runtime);
    }
    async describeHubClustersWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.profile)) {
            query["Profile"] = request.profile;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribeHubClusters",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribeHubClustersResponse({}));
    }
    async describeHubClusters(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeHubClustersWithOptions(request, runtime);
    }
    async describeManagedClustersWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribeManagedClusters",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribeManagedClustersResponse({}));
    }
    async describeManagedClusters(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeManagedClustersWithOptions(request, runtime);
    }
    async describePoliciesWithOptions(runtime) {
        let req = new $OpenApi.OpenApiRequest({});
        let params = new $OpenApi.Params({
            action: "DescribePolicies",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribePoliciesResponse({}));
    }
    async describePolicies() {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describePoliciesWithOptions(runtime);
    }
    async describePolicyDetailsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.policyName)) {
            query["PolicyName"] = request.policyName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribePolicyDetails",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribePolicyDetailsResponse({}));
    }
    async describePolicyDetails(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describePolicyDetailsWithOptions(request, runtime);
    }
    async describePolicyGovernanceInClusterWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribePolicyGovernanceInCluster",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribePolicyGovernanceInClusterResponse({}));
    }
    async describePolicyGovernanceInCluster(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describePolicyGovernanceInClusterWithOptions(request, runtime);
    }
    async describePolicyInstancesWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.policyName)) {
            query["PolicyName"] = request.policyName;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribePolicyInstances",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribePolicyInstancesResponse({}));
    }
    async describePolicyInstances(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describePolicyInstancesWithOptions(request, runtime);
    }
    async describePolicyInstancesStatusWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribePolicyInstancesStatus",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribePolicyInstancesStatusResponse({}));
    }
    async describePolicyInstancesStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describePolicyInstancesStatusWithOptions(request, runtime);
    }
    async describeRegionsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = openapi_util_1.default.query(tea_util_1.default.toMap(request));
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribeRegions",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "GET",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribeRegionsResponse({}));
    }
    async describeRegions(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeRegionsWithOptions(request, runtime);
    }
    async describeUserPermissionsWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["UserId"] = request.userId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DescribeUserPermissions",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DescribeUserPermissionsResponse({}));
    }
    async describeUserPermissions(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.describeUserPermissionsWithOptions(request, runtime);
    }
    async detachClusterFromHubWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.detachFromMesh)) {
            query["DetachFromMesh"] = request.detachFromMesh;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.clusterIds)) {
            body["ClusterIds"] = request.clusterIds;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DetachClusterFromHub",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new DetachClusterFromHubResponse({}));
    }
    async detachClusterFromHub(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.detachClusterFromHubWithOptions(request, runtime);
    }
    async grantUserPermissionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.isRamRole)) {
            query["IsRamRole"] = request.isRamRole;
        }
        if (!tea_util_1.default.isUnset(request.namespace)) {
            query["Namespace"] = request.namespace;
        }
        if (!tea_util_1.default.isUnset(request.roleName)) {
            query["RoleName"] = request.roleName;
        }
        if (!tea_util_1.default.isUnset(request.roleType)) {
            query["RoleType"] = request.roleType;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["UserId"] = request.userId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GrantUserPermission",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GrantUserPermissionResponse({}));
    }
    async grantUserPermission(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.grantUserPermissionWithOptions(request, runtime);
    }
    async grantUserPermissionsWithOptions(tmpReq, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new GrantUserPermissionsShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.permissions)) {
            request.permissionsShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.permissions, "Permissions", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.permissionsShrink)) {
            query["Permissions"] = request.permissionsShrink;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["UserId"] = request.userId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GrantUserPermissions",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new GrantUserPermissionsResponse({}));
    }
    async grantUserPermissions(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.grantUserPermissionsWithOptions(request, runtime);
    }
    async updateHubClusterFeatureWithOptions(tmpReq, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new UpdateHubClusterFeatureShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.accessControlList)) {
            request.accessControlListShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.accessControlList, "AccessControlList", "json");
        }
        if (!tea_util_1.default.isUnset(tmpReq.vSwitches)) {
            request.vSwitchesShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.vSwitches, "VSwitches", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.accessControlListShrink)) {
            query["AccessControlList"] = request.accessControlListShrink;
        }
        if (!tea_util_1.default.isUnset(request.apiServerEipId)) {
            query["ApiServerEipId"] = request.apiServerEipId;
        }
        if (!tea_util_1.default.isUnset(request.argoCDEnabled)) {
            query["ArgoCDEnabled"] = request.argoCDEnabled;
        }
        if (!tea_util_1.default.isUnset(request.argoCDHAEnabled)) {
            query["ArgoCDHAEnabled"] = request.argoCDHAEnabled;
        }
        if (!tea_util_1.default.isUnset(request.argoServerEnabled)) {
            query["ArgoServerEnabled"] = request.argoServerEnabled;
        }
        if (!tea_util_1.default.isUnset(request.auditLogEnabled)) {
            query["AuditLogEnabled"] = request.auditLogEnabled;
        }
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.deletionProtection)) {
            query["DeletionProtection"] = request.deletionProtection;
        }
        if (!tea_util_1.default.isUnset(request.enableMesh)) {
            query["EnableMesh"] = request.enableMesh;
        }
        if (!tea_util_1.default.isUnset(request.monitorEnabled)) {
            query["MonitorEnabled"] = request.monitorEnabled;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            query["Name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.priceLimit)) {
            query["PriceLimit"] = request.priceLimit;
        }
        if (!tea_util_1.default.isUnset(request.publicAccessEnabled)) {
            query["PublicAccessEnabled"] = request.publicAccessEnabled;
        }
        if (!tea_util_1.default.isUnset(request.publicApiServerEnabled)) {
            query["PublicApiServerEnabled"] = request.publicApiServerEnabled;
        }
        if (!tea_util_1.default.isUnset(request.vSwitchesShrink)) {
            query["VSwitches"] = request.vSwitchesShrink;
        }
        if (!tea_util_1.default.isUnset(request.workflowScheduleMode)) {
            query["WorkflowScheduleMode"] = request.workflowScheduleMode;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateHubClusterFeature",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateHubClusterFeatureResponse({}));
    }
    async updateHubClusterFeature(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateHubClusterFeatureWithOptions(request, runtime);
    }
    async updateUserPermissionWithOptions(request, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.clusterId)) {
            query["ClusterId"] = request.clusterId;
        }
        if (!tea_util_1.default.isUnset(request.namespace)) {
            query["Namespace"] = request.namespace;
        }
        if (!tea_util_1.default.isUnset(request.roleName)) {
            query["RoleName"] = request.roleName;
        }
        if (!tea_util_1.default.isUnset(request.roleType)) {
            query["RoleType"] = request.roleType;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["UserId"] = request.userId;
        }
        let req = new $OpenApi.OpenApiRequest({
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateUserPermission",
            version: "2022-01-01",
            protocol: "HTTPS",
            pathname: "/",
            method: "POST",
            authType: "AK",
            style: "RPC",
            reqBodyType: "formData",
            bodyType: "json",
        });
        return $tea.cast(await this.callApi(params, req, runtime), new UpdateUserPermissionResponse({}));
    }
    async updateUserPermission(request) {
        let runtime = new $Util.RuntimeOptions({});
        return await this.updateUserPermissionWithOptions(request, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map