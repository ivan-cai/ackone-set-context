/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AttachClusterToHubRequest extends $tea.Model {
    attachToMesh?: boolean;
    clusterId?: string;
    clusterIds?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachClusterToHubResponseBody extends $tea.Model {
    clusterId?: string;
    managedClusterIds?: string[];
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachClusterToHubResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AttachClusterToHubResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateHubClusterRequest extends $tea.Model {
    apiServerPublicEip?: boolean;
    argoServerEnabled?: boolean;
    auditLogEnabled?: boolean;
    isEnterpriseSecurityGroup?: boolean;
    name?: string;
    priceLimit?: string;
    profile?: string;
    regionId?: string;
    vSwitches?: string;
    vpcId?: string;
    workflowScheduleMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateHubClusterResponseBody extends $tea.Model {
    clusterId?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateHubClusterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateHubClusterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteHubClusterRequest extends $tea.Model {
    clusterId?: string;
    force?: boolean;
    retainResources?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteHubClusterShrinkRequest extends $tea.Model {
    clusterId?: string;
    force?: boolean;
    retainResourcesShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteHubClusterResponseBody extends $tea.Model {
    clusterId?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteHubClusterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteHubClusterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePolicyInstanceRequest extends $tea.Model {
    clusterId?: string;
    clusterIds?: string[];
    policyName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePolicyInstanceShrinkRequest extends $tea.Model {
    clusterId?: string;
    clusterIdsShrink?: string;
    policyName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePolicyInstanceResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePolicyInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeletePolicyInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUserPermissionRequest extends $tea.Model {
    clusterId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUserPermissionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUserPermissionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteUserPermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeployPolicyInstanceRequest extends $tea.Model {
    clusterId?: string;
    clusterIds?: string[];
    namespaces?: string[];
    policyAction?: string;
    policyName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeployPolicyInstanceShrinkRequest extends $tea.Model {
    clusterId?: string;
    clusterIdsShrink?: string;
    namespacesShrink?: string;
    policyAction?: string;
    policyName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeployPolicyInstanceResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeployPolicyInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeployPolicyInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterDetailsRequest extends $tea.Model {
    clusterId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterDetailsResponseBody extends $tea.Model {
    cluster?: DescribeHubClusterDetailsResponseBodyCluster;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterDetailsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeHubClusterDetailsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterKubeconfigRequest extends $tea.Model {
    clusterId?: string;
    privateIpAddress?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterKubeconfigResponseBody extends $tea.Model {
    kubeconfig?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterKubeconfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeHubClusterKubeconfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterLogsRequest extends $tea.Model {
    clusterId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterLogsResponseBody extends $tea.Model {
    logs?: DescribeHubClusterLogsResponseBodyLogs[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterLogsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeHubClusterLogsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClustersRequest extends $tea.Model {
    profile?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClustersResponseBody extends $tea.Model {
    clusters?: DescribeHubClustersResponseBodyClusters[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClustersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeHubClustersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeManagedClustersRequest extends $tea.Model {
    clusterId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeManagedClustersResponseBody extends $tea.Model {
    clusters?: DescribeManagedClustersResponseBodyClusters[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeManagedClustersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeManagedClustersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePoliciesResponseBody extends $tea.Model {
    policies?: DescribePoliciesResponseBodyPolicies[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePoliciesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribePoliciesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyDetailsRequest extends $tea.Model {
    policyName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyDetailsResponseBody extends $tea.Model {
    policy?: DescribePolicyDetailsResponseBodyPolicy;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyDetailsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribePolicyDetailsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterRequest extends $tea.Model {
    clusterId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBody extends $tea.Model {
    policyGovernances?: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernances[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribePolicyGovernanceInClusterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesRequest extends $tea.Model {
    clusterId?: string;
    policyName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesResponseBody extends $tea.Model {
    policies?: DescribePolicyInstancesResponseBodyPolicies[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribePolicyInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesStatusRequest extends $tea.Model {
    clusterId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesStatusResponseBody extends $tea.Model {
    policies?: DescribePolicyInstancesStatusResponseBodyPolicies;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribePolicyInstancesStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionsRequest extends $tea.Model {
    language?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionsResponseBody extends $tea.Model {
    regions?: DescribeRegionsResponseBodyRegions[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeRegionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUserPermissionsRequest extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUserPermissionsResponseBody extends $tea.Model {
    permissions?: DescribeUserPermissionsResponseBodyPermissions[];
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUserPermissionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeUserPermissionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachClusterFromHubRequest extends $tea.Model {
    clusterId?: string;
    clusterIds?: string;
    detachFromMesh?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachClusterFromHubResponseBody extends $tea.Model {
    clusterId?: string;
    managedClusterIds?: string[];
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetachClusterFromHubResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DetachClusterFromHubResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantUserPermissionRequest extends $tea.Model {
    clusterId?: string;
    isRamRole?: boolean;
    namespace?: string;
    roleName?: string;
    roleType?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantUserPermissionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantUserPermissionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GrantUserPermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantUserPermissionsRequest extends $tea.Model {
    permissions?: GrantUserPermissionsRequestPermissions[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantUserPermissionsShrinkRequest extends $tea.Model {
    permissionsShrink?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantUserPermissionsResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantUserPermissionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GrantUserPermissionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateHubClusterFeatureRequest extends $tea.Model {
    accessControlList?: string[];
    apiServerEipId?: string;
    argoCDEnabled?: boolean;
    argoCDHAEnabled?: boolean;
    argoServerEnabled?: boolean;
    auditLogEnabled?: boolean;
    clusterId?: string;
    deletionProtection?: boolean;
    enableMesh?: boolean;
    monitorEnabled?: boolean;
    name?: string;
    priceLimit?: string;
    publicAccessEnabled?: boolean;
    publicApiServerEnabled?: boolean;
    vSwitches?: string[];
    workflowScheduleMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateHubClusterFeatureShrinkRequest extends $tea.Model {
    accessControlListShrink?: string;
    apiServerEipId?: string;
    argoCDEnabled?: boolean;
    argoCDHAEnabled?: boolean;
    argoServerEnabled?: boolean;
    auditLogEnabled?: boolean;
    clusterId?: string;
    deletionProtection?: boolean;
    enableMesh?: boolean;
    monitorEnabled?: boolean;
    name?: string;
    priceLimit?: string;
    publicAccessEnabled?: boolean;
    publicApiServerEnabled?: boolean;
    vSwitchesShrink?: string;
    workflowScheduleMode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateHubClusterFeatureResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateHubClusterFeatureResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateHubClusterFeatureResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserPermissionRequest extends $tea.Model {
    clusterId?: string;
    namespace?: string;
    roleName?: string;
    roleType?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserPermissionResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserPermissionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpdateUserPermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterDetailsResponseBodyClusterApiServer extends $tea.Model {
    apiServerEipId?: string;
    enabledPublic?: boolean;
    loadBalancerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterDetailsResponseBodyClusterClusterInfo extends $tea.Model {
    clusterId?: string;
    clusterSpec?: string;
    creationTime?: string;
    errorMessage?: string;
    name?: string;
    profile?: string;
    regionId?: string;
    state?: string;
    updateTime?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterDetailsResponseBodyClusterConditions extends $tea.Model {
    message?: string;
    reason?: string;
    status?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterDetailsResponseBodyClusterEndpoints extends $tea.Model {
    intranetApiServerEndpoint?: string;
    publicApiServerEndpoint?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterDetailsResponseBodyClusterLogConfig extends $tea.Model {
    enableLog?: boolean;
    logProject?: string;
    logStoreTTL?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterDetailsResponseBodyClusterMeshConfig extends $tea.Model {
    enableMesh?: boolean;
    meshId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterDetailsResponseBodyClusterNetwork extends $tea.Model {
    clusterDomain?: string;
    IPStack?: string;
    securityGroupIDs?: string[];
    vSwitches?: string[];
    vpcId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterDetailsResponseBodyClusterWorkflowConfigWorkflowUnitsVSwitches extends $tea.Model {
    vswitchId?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterDetailsResponseBodyClusterWorkflowConfigWorkflowUnits extends $tea.Model {
    regionId?: string;
    vSwitches?: DescribeHubClusterDetailsResponseBodyClusterWorkflowConfigWorkflowUnitsVSwitches[];
    vpcId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterDetailsResponseBodyClusterWorkflowConfig extends $tea.Model {
    argoServerEnabled?: boolean;
    priceLimit?: string;
    workflowScheduleMode?: string;
    workflowUnits?: DescribeHubClusterDetailsResponseBodyClusterWorkflowConfigWorkflowUnits[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterDetailsResponseBodyCluster extends $tea.Model {
    apiServer?: DescribeHubClusterDetailsResponseBodyClusterApiServer;
    clusterInfo?: DescribeHubClusterDetailsResponseBodyClusterClusterInfo;
    conditions?: DescribeHubClusterDetailsResponseBodyClusterConditions[];
    endpoints?: DescribeHubClusterDetailsResponseBodyClusterEndpoints;
    logConfig?: DescribeHubClusterDetailsResponseBodyClusterLogConfig;
    meshConfig?: DescribeHubClusterDetailsResponseBodyClusterMeshConfig;
    network?: DescribeHubClusterDetailsResponseBodyClusterNetwork;
    workflowConfig?: DescribeHubClusterDetailsResponseBodyClusterWorkflowConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClusterLogsResponseBodyLogs extends $tea.Model {
    clusterId?: string;
    clusterLog?: string;
    creationTime?: string;
    logLevel?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClustersResponseBodyClustersApiServer extends $tea.Model {
    apiServerEipId?: string;
    enabledPublic?: boolean;
    loadBalancerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClustersResponseBodyClustersClusterInfo extends $tea.Model {
    clusterId?: string;
    clusterSpec?: string;
    creationTime?: string;
    errorMessage?: string;
    name?: string;
    profile?: string;
    regionId?: string;
    state?: string;
    updateTime?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClustersResponseBodyClustersConditions extends $tea.Model {
    message?: string;
    reason?: string;
    status?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClustersResponseBodyClustersEndpoints extends $tea.Model {
    intranetApiServerEndpoint?: string;
    publicApiServerEndpoint?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClustersResponseBodyClustersLogConfig extends $tea.Model {
    enableLog?: boolean;
    logProject?: string;
    logStoreTTL?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClustersResponseBodyClustersMeshConfig extends $tea.Model {
    enableMesh?: boolean;
    meshId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClustersResponseBodyClustersNetwork extends $tea.Model {
    clusterDomain?: string;
    securityGroupIDs?: string[];
    vSwitches?: string[];
    vpcId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeHubClustersResponseBodyClusters extends $tea.Model {
    apiServer?: DescribeHubClustersResponseBodyClustersApiServer;
    clusterInfo?: DescribeHubClustersResponseBodyClustersClusterInfo;
    conditions?: DescribeHubClustersResponseBodyClustersConditions[];
    endpoints?: DescribeHubClustersResponseBodyClustersEndpoints;
    logConfig?: DescribeHubClustersResponseBodyClustersLogConfig;
    meshConfig?: DescribeHubClustersResponseBodyClustersMeshConfig;
    network?: DescribeHubClustersResponseBodyClustersNetwork;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeManagedClustersResponseBodyClustersCluster extends $tea.Model {
    clusterID?: string;
    clusterSpec?: string;
    clusterType?: string;
    created?: string;
    currentVersion?: string;
    initVersion?: string;
    name?: string;
    profile?: string;
    region?: string;
    resourceGroupId?: string;
    state?: string;
    updated?: string;
    vSwitchID?: string;
    vpcID?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeManagedClustersResponseBodyClustersMeshStatus extends $tea.Model {
    inMesh?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeManagedClustersResponseBodyClustersStatus extends $tea.Model {
    message?: string;
    state?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeManagedClustersResponseBodyClusters extends $tea.Model {
    cluster?: DescribeManagedClustersResponseBodyClustersCluster;
    meshStatus?: DescribeManagedClustersResponseBodyClustersMeshStatus;
    status?: DescribeManagedClustersResponseBodyClustersStatus;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePoliciesResponseBodyPolicies extends $tea.Model {
    category?: string;
    names?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyDetailsResponseBodyPolicy extends $tea.Model {
    action?: string;
    category?: string;
    created?: string;
    description?: string;
    name?: string;
    noConfig?: number;
    severity?: string;
    template?: string;
    updated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesCluster extends $tea.Model {
    clusterId?: string;
    clusterSpec?: string;
    clusterType?: string;
    name?: string;
    profile?: string;
    regionId?: string;
    state?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceAdmitLog extends $tea.Model {
    count?: string;
    logProject?: string;
    logStore?: string;
    logs?: {
        [key: string]: string;
    }[];
    progress?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceOnState extends $tea.Model {
    enabledCount?: number;
    severity?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolationsDeny extends $tea.Model {
    severity?: string;
    violations?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolationsWarn extends $tea.Model {
    severity?: string;
    violations?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolations extends $tea.Model {
    deny?: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolationsDeny[];
    warn?: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolationsWarn[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolationsDeny extends $tea.Model {
    policyDescription?: string;
    policyName?: string;
    severity?: string;
    violations?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolationsWarn extends $tea.Model {
    policyDescription?: string;
    policyName?: string;
    severity?: string;
    violations?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolations extends $tea.Model {
    deny?: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolationsDeny[];
    warn?: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolationsWarn[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolation extends $tea.Model {
    totalViolations?: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationTotalViolations;
    violations?: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolationViolations;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernance extends $tea.Model {
    admitLog?: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceAdmitLog;
    onState?: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceOnState[];
    violation?: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernanceViolation;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyPolicyGovernances extends $tea.Model {
    cluster?: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesCluster;
    policyGovernance?: DescribePolicyGovernanceInClusterResponseBodyPolicyGovernancesPolicyGovernance;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesResponseBodyPolicies extends $tea.Model {
    clusterId?: string;
    instanceName?: string;
    policyAction?: string;
    policyCategory?: string;
    policyDescription?: string;
    policyName?: string;
    policyParameters?: {
        [key: string]: string;
    };
    policyScope?: string;
    policySeverity?: string;
    totalViolations?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesStatusResponseBodyPoliciesPolicyInstancesPolicyClusters extends $tea.Model {
    clusterId?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesStatusResponseBodyPoliciesPolicyInstances extends $tea.Model {
    policyCategory?: string;
    policyClusters?: DescribePolicyInstancesStatusResponseBodyPoliciesPolicyInstancesPolicyClusters[];
    policyDescription?: string;
    policyInstancesCount?: number;
    policyName?: string;
    policySeverity?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesStatusResponseBodyPoliciesSeverityInfo extends $tea.Model {
    severityCount?: string;
    severityType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesStatusResponseBodyPolicies extends $tea.Model {
    policyInstances?: DescribePolicyInstancesStatusResponseBodyPoliciesPolicyInstances[];
    severityInfo?: DescribePolicyInstancesStatusResponseBodyPoliciesSeverityInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRegionsResponseBodyRegions extends $tea.Model {
    localName?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUserPermissionsResponseBodyPermissions extends $tea.Model {
    resourceId?: string;
    resourceType?: string;
    roleName?: string;
    roleType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantUserPermissionsRequestPermissions extends $tea.Model {
    clusterId?: string;
    isRamRole?: boolean;
    namespace?: string;
    roleName?: string;
    roleType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
    attachClusterToHubWithOptions(request: AttachClusterToHubRequest, runtime: $Util.RuntimeOptions): Promise<AttachClusterToHubResponse>;
    attachClusterToHub(request: AttachClusterToHubRequest): Promise<AttachClusterToHubResponse>;
    createHubClusterWithOptions(request: CreateHubClusterRequest, runtime: $Util.RuntimeOptions): Promise<CreateHubClusterResponse>;
    createHubCluster(request: CreateHubClusterRequest): Promise<CreateHubClusterResponse>;
    deleteHubClusterWithOptions(tmpReq: DeleteHubClusterRequest, runtime: $Util.RuntimeOptions): Promise<DeleteHubClusterResponse>;
    deleteHubCluster(request: DeleteHubClusterRequest): Promise<DeleteHubClusterResponse>;
    deletePolicyInstanceWithOptions(tmpReq: DeletePolicyInstanceRequest, runtime: $Util.RuntimeOptions): Promise<DeletePolicyInstanceResponse>;
    deletePolicyInstance(request: DeletePolicyInstanceRequest): Promise<DeletePolicyInstanceResponse>;
    deleteUserPermissionWithOptions(request: DeleteUserPermissionRequest, runtime: $Util.RuntimeOptions): Promise<DeleteUserPermissionResponse>;
    deleteUserPermission(request: DeleteUserPermissionRequest): Promise<DeleteUserPermissionResponse>;
    deployPolicyInstanceWithOptions(tmpReq: DeployPolicyInstanceRequest, runtime: $Util.RuntimeOptions): Promise<DeployPolicyInstanceResponse>;
    deployPolicyInstance(request: DeployPolicyInstanceRequest): Promise<DeployPolicyInstanceResponse>;
    describeHubClusterDetailsWithOptions(request: DescribeHubClusterDetailsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHubClusterDetailsResponse>;
    describeHubClusterDetails(request: DescribeHubClusterDetailsRequest): Promise<DescribeHubClusterDetailsResponse>;
    describeHubClusterKubeconfigWithOptions(request: DescribeHubClusterKubeconfigRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHubClusterKubeconfigResponse>;
    describeHubClusterKubeconfig(request: DescribeHubClusterKubeconfigRequest): Promise<DescribeHubClusterKubeconfigResponse>;
    describeHubClusterLogsWithOptions(request: DescribeHubClusterLogsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHubClusterLogsResponse>;
    describeHubClusterLogs(request: DescribeHubClusterLogsRequest): Promise<DescribeHubClusterLogsResponse>;
    describeHubClustersWithOptions(request: DescribeHubClustersRequest, runtime: $Util.RuntimeOptions): Promise<DescribeHubClustersResponse>;
    describeHubClusters(request: DescribeHubClustersRequest): Promise<DescribeHubClustersResponse>;
    describeManagedClustersWithOptions(request: DescribeManagedClustersRequest, runtime: $Util.RuntimeOptions): Promise<DescribeManagedClustersResponse>;
    describeManagedClusters(request: DescribeManagedClustersRequest): Promise<DescribeManagedClustersResponse>;
    describePoliciesWithOptions(runtime: $Util.RuntimeOptions): Promise<DescribePoliciesResponse>;
    describePolicies(): Promise<DescribePoliciesResponse>;
    describePolicyDetailsWithOptions(request: DescribePolicyDetailsRequest, runtime: $Util.RuntimeOptions): Promise<DescribePolicyDetailsResponse>;
    describePolicyDetails(request: DescribePolicyDetailsRequest): Promise<DescribePolicyDetailsResponse>;
    describePolicyGovernanceInClusterWithOptions(request: DescribePolicyGovernanceInClusterRequest, runtime: $Util.RuntimeOptions): Promise<DescribePolicyGovernanceInClusterResponse>;
    describePolicyGovernanceInCluster(request: DescribePolicyGovernanceInClusterRequest): Promise<DescribePolicyGovernanceInClusterResponse>;
    describePolicyInstancesWithOptions(request: DescribePolicyInstancesRequest, runtime: $Util.RuntimeOptions): Promise<DescribePolicyInstancesResponse>;
    describePolicyInstances(request: DescribePolicyInstancesRequest): Promise<DescribePolicyInstancesResponse>;
    describePolicyInstancesStatusWithOptions(request: DescribePolicyInstancesStatusRequest, runtime: $Util.RuntimeOptions): Promise<DescribePolicyInstancesStatusResponse>;
    describePolicyInstancesStatus(request: DescribePolicyInstancesStatusRequest): Promise<DescribePolicyInstancesStatusResponse>;
    describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeRegionsResponse>;
    describeRegions(request: DescribeRegionsRequest): Promise<DescribeRegionsResponse>;
    describeUserPermissionsWithOptions(request: DescribeUserPermissionsRequest, runtime: $Util.RuntimeOptions): Promise<DescribeUserPermissionsResponse>;
    describeUserPermissions(request: DescribeUserPermissionsRequest): Promise<DescribeUserPermissionsResponse>;
    detachClusterFromHubWithOptions(request: DetachClusterFromHubRequest, runtime: $Util.RuntimeOptions): Promise<DetachClusterFromHubResponse>;
    detachClusterFromHub(request: DetachClusterFromHubRequest): Promise<DetachClusterFromHubResponse>;
    grantUserPermissionWithOptions(request: GrantUserPermissionRequest, runtime: $Util.RuntimeOptions): Promise<GrantUserPermissionResponse>;
    grantUserPermission(request: GrantUserPermissionRequest): Promise<GrantUserPermissionResponse>;
    grantUserPermissionsWithOptions(tmpReq: GrantUserPermissionsRequest, runtime: $Util.RuntimeOptions): Promise<GrantUserPermissionsResponse>;
    grantUserPermissions(request: GrantUserPermissionsRequest): Promise<GrantUserPermissionsResponse>;
    updateHubClusterFeatureWithOptions(tmpReq: UpdateHubClusterFeatureRequest, runtime: $Util.RuntimeOptions): Promise<UpdateHubClusterFeatureResponse>;
    updateHubClusterFeature(request: UpdateHubClusterFeatureRequest): Promise<UpdateHubClusterFeatureResponse>;
    updateUserPermissionWithOptions(request: UpdateUserPermissionRequest, runtime: $Util.RuntimeOptions): Promise<UpdateUserPermissionResponse>;
    updateUserPermission(request: UpdateUserPermissionRequest): Promise<UpdateUserPermissionResponse>;
}
